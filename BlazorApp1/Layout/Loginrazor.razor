@page "/login"
@layout NoLayout
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@using BlazorApp1.Services  

<link href="css/Login.css?v=3.0" rel="stylesheet" />

<div class="container">
    <!-- Логотип в левом углу -->
    <div class="logo-container">
        <img class="logo" src="/images/image1.png" alt="Логотип" />
    </div>

    <!-- Декоративные элементы -->
    <div class="decor-element decor-1"></div>
    <div class="decor-element decor-2"></div>

    <!-- Центральный блок с формой -->
    <div class="form-section">
        <div class="form-container">
            <h1 class="form-title">Вход в систему</h1>
            <p class="form-subtitle">Добро пожаловать обратно!<br>Пожалуйста, войдите в свой аккаунт</p>

            <EditForm Model="@loginModel" OnValidSubmit="@LoginUser" Context="formContext">
                <DataAnnotationsValidator />

                <!-- Email -->
                <div class="form-group">
                    <label class="input-label">
                        Email: <span class="required-star">*</span>
                    </label>
                    <div class="input-container">
                        <div class="input-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                                <polyline points="22,6 12,13 2,6"></polyline>
                            </svg>
                        </div>
                        <InputText @bind-Value="@loginModel.Email" class="input-field" placeholder="Введите ваш email" />
                    </div>
                    <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
                </div>

                <!-- Пароль -->
                <div class="form-group">
                    <label class="input-label">
                        Пароль: <span class="required-star">*</span>
                    </label>
                    <div class="input-container">
                        <div class="input-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                                <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                            </svg>
                        </div>
                        <InputText type="@passwordFieldType"
                                   @bind-Value="@loginModel.Password"
                                   class="input-field"
                                   placeholder="Введите ваш пароль" />
                        <div class="password-toggle" @onclick="TogglePasswordVisibility">
                            @if (showPassword)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                    <circle cx="12" cy="12" r="3"></circle>
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
                                    <line x1="1" y1="1" x2="23" y2="23"></line>
                                </svg>
                            }
                        </div>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
                </div>

                <!-- Дополнительные опции -->
                <div class="password-actions">
                    <label class="remember-me">
                        <input type="checkbox" @bind="loginModel.RememberMe" /> Запомнить меня
                    </label>
                    <a href="/forgot-password" class="forgot-password">Забыли пароль?</a>
                </div>

                <button type="submit" class="submit-btn">Войти</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(apiErrorMessage))
            {
                <div class="api-error">@apiErrorMessage</div>
            }

            <div class="login-link">
                Ещё нет аккаунта? <a href="/register">Зарегистрироваться</a>
            </div>
        </div>
    </div>
</div>

@code {
    public class LoginModel
    {
        [Required(ErrorMessage = "Email обязателен")]
        [EmailAddress(ErrorMessage = "Некорректный формат email")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Пароль обязателен")]
        public string Password { get; set; }

        public bool RememberMe { get; set; }
    }

    private LoginModel loginModel = new();
    private string apiErrorMessage = "";
    private bool showPassword = false;
    private string passwordFieldType = "password";

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        passwordFieldType = showPassword ? "text" : "password";
    }

    private async Task LoginUser()
    {
        apiErrorMessage = "";

        try
        {
            var response = await Http.PostAsJsonAsync(
                "http://localhost:5199/api/User/login",
                new { loginModel.Email, loginModel.Password }
            );

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                Console.WriteLine($"Login success: {result.user.name} {result.user.surname}");

                var authProvider = (ClientAuthState)AuthStateProvider;
                authProvider.SetAuthenticatedUser(
                    result.user.email,
                    result.user.name,
                    result.user.surname, // Передаем фамилию
                    result.user.avatarUrl // Если есть аватар
                );

                NavigationManager.NavigateTo("/glav");
            }
        }
        catch (Exception ex)
        {
            apiErrorMessage = $"Ошибка подключения: {ex.Message}";
        }
    }

    public class LoginResult
    {
        public string message { get; set; }
        public UserData user { get; set; } // Изменили структуру
    }

    public class UserData
    {
        public string email { get; set; }
        public string name { get; set; }
        public string surname { get; set; }
        public string avatarUrl { get; set; }
    }
}